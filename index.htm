<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Triple Countdown</title>
  <style>
    :root { --bg:#0b0f14; --card:#121824; --fg:#e6eefc; --muted:#94a3b8; --accent:#60a5fa; }
    html,body{height:100%}
    body{margin:0;background:linear-gradient(180deg,var(--bg),#0f172a);color:var(--fg);font-family:Inter,system-ui,Segoe UI,Roboto,Helvetica,Arial,sans-serif;}
    .wrap{min-height:100%;display:grid;place-items:center;padding:24px}
    .card{width:min(880px,96vw);background:var(--card);border:1px solid rgba(255,255,255,.06);border-radius:20px;box-shadow:0 10px 30px rgba(0,0,0,.35);padding:28px}
    h1{margin:0 0 6px;font-size:28px;letter-spacing:.2px}
    .sub{color:var(--muted);font-size:13px;margin-bottom:24px}
    .row{display:grid;grid-template-columns:1fr;gap:14px}
    @media (min-width:720px){.row{grid-template-columns:repeat(3,1fr)}}
    .tile{background:rgba(255,255,255,.03);border:1px solid rgba(255,255,255,.06);border-radius:16px;padding:16px 18px}
    .label{color:var(--muted);font-size:12px;text-transform:uppercase;letter-spacing:.14em;margin-bottom:8px}
    .val{font-variant-numeric:tabular-nums; font-size:56px; line-height:1;}
    .unit{font-size:14px;color:var(--muted);margin-left:8px}
    .controls{display:flex;gap:10px;flex-wrap:wrap;margin-top:18px}
    button,input{background:#0f172a;color:var(--fg);border:1px solid rgba(255,255,255,.12);border-radius:10px;padding:10px 12px;font-size:14px}
    button{cursor:pointer}
    button.primary{background:var(--accent);color:#08111f;border:none}
    .pill{font-size:12px;color:var(--muted)}
    a{color:var(--accent);text-decoration:none}
    .done{color:#22c55e}
  </style>
</head>
<body>
  <div class="wrap">
    <div class="card">
      <h1>Triple Countdown</h1>
      <div class="sub">Same end-time. Three views: seconds, minutes, hours. Share this URL and it stays synced across devices.</div>

      <div class="row" role="group" aria-label="countdowns">
        <div class="tile">
          <div class="label">Countdown 1 · seconds</div>
          <div class="val"><span id="sec">—</span><span class="unit">seconds</span></div>
        </div>
        <div class="tile">
          <div class="label">Countdown 2 · minutes</div>
          <div class="val"><span id="min">—</span><span class="unit">minutes</span></div>
        </div>
        <div class="tile">
          <div class="label">Countdown 3 · hours</div>
          <div class="val"><span id="hr">—</span><span class="unit">hours</span></div>
        </div>
      </div>

      <div class="controls">
        <input id="endInput" type="datetime-local" title="Pick a custom end time (local timezone)" />
        <button id="apply">Set custom end</button>
        <span class="pill">End: <span id="endText">not set</span></span>
      </div>

      <div class="sub" style="margin-top:10px">
        Tip: Bookmark this page after the URL shows <code>?end=...</code>. That link will show the same countdown anywhere.
      </div>
    </div>
  </div>

  <script>
    // Defaults from your spec
    const DEFAULT_SECONDS = 831600;      // every second
    const DEFAULT_MINUTES = 13860;       // every minute
    const DEFAULT_HOURS   = 231;         // every hour
    // All three equate to the same end time. Use seconds as canonical.

    const qs = new URLSearchParams(location.search);
    const secEl = document.getElementById('sec');
    const minEl = document.getElementById('min');
    const hrEl  = document.getElementById('hr');
    const endText = document.getElementById('endText');
    const endInput = document.getElementById('endInput');

    let endMs = null; // epoch ms

    function toIsoLocal(dt){
      // For datetime-local value
      const pad = n => String(n).padStart(2,'0');
      return `${dt.getFullYear()}-${pad(dt.getMonth()+1)}-${pad(dt.getDate())}T${pad(dt.getHours())}:${pad(dt.getMinutes())}`;
    }

    function syncUrl(newEndMs){
      const iso = new Date(newEndMs).toISOString();
      const url = new URL(location.href);
      url.searchParams.set('end', iso);
      history.replaceState(null, '', url.toString());
      endText.textContent = iso;
      // also reflect in picker as local time
      endInput.value = toIsoLocal(new Date(newEndMs));
    }

    function initEndFromUrlOrDefault(){
      const endParam = qs.get('end');
      if(endParam){
        const t = Date.parse(endParam);
        if(!Number.isNaN(t)){
          endMs = t;
          syncUrl(endMs);
          return;
        }
      }
      // No valid end provided. Initialize to now + DEFAULT_SECONDS.
      endMs = Date.now() + DEFAULT_SECONDS*1000;
      syncUrl(endMs);
    }

    function clampZero(x){ return x < 0 ? 0 : x; }

    let tickSecond, tickMinute, tickHour;

    function startTimers(){
      stopTimers();
      updateAll(); // immediate paint
      // Seconds timer
      tickSecond = setInterval(() => {
        updateSeconds();
        if (remainingMs() <= 0) finish();
      }, 1000);
      // Minutes timer: align to the next minute boundary to avoid visible drift
      const msToNextMinute = 60000 - (Date.now() % 60000);
      setTimeout(() => {
        updateMinutes();
        tickMinute = setInterval(() => {
          updateMinutes();
        }, 60000);
      }, msToNextMinute);
      // Hours timer: align to next hour
      const msToNextHour = 3600000 - (Date.now() % 3600000);
      setTimeout(() => {
        updateHours();
        tickHour = setInterval(() => {
          updateHours();
        }, 3600000);
      }, msToNextHour);
    }

    function stopTimers(){
      if(tickSecond) clearInterval(tickSecond);
      if(tickMinute) clearInterval(tickMinute);
      if(tickHour)   clearInterval(tickHour);
      tickSecond = tickMinute = tickHour = null;
    }

    function remainingMs(){ return endMs - Date.now(); }

    function updateSeconds(){
      const s = Math.floor(clampZero(remainingMs())/1000);
      secEl.textContent = s.toString();
    }
    function updateMinutes(){
      const m = Math.floor(clampZero(remainingMs())/60000);
      minEl.textContent = m.toString();
    }
    function updateHours(){
      const h = Math.floor(clampZero(remainingMs())/3600000);
      hrEl.textContent = h.toString();
    }
    function updateAll(){ updateSeconds(); updateMinutes(); updateHours(); }

    function finish(){
      stopTimers();
      secEl.textContent = '0';
      minEl.textContent = '0';
      hrEl.textContent  = '0';
      document.title = 'Done • Triple Countdown';
      endText.innerHTML = '<span class="done">Complete</span>';
    }

    // Controls
    document.getElementById('reset').addEventListener('click', () => {
      endMs = Date.now() + DEFAULT_SECONDS*1000; // 831600 s
      syncUrl(endMs);
      document.title = 'Triple Countdown';
      startTimers();
    });

    document.getElementById('apply').addEventListener('click', () => {
      if(!endInput.value) return;
      const local = new Date(endInput.value); // treated as local time
      const utcMs = local.getTime();
      if(Number.isNaN(utcMs)) return;
      endMs = utcMs;
      syncUrl(endMs);
      document.title = 'Triple Countdown';
      startTimers();
    });

    // Kickoff
    initEndFromUrlOrDefault();
    startTimers();
  </script>
</body>
</html>

